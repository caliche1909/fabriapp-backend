const express = require('express');
const router = express.Router();
const { authController } = require('../controllers');
const {
    createSmartRateLimit
} = require('../middlewares/smartRateLimit.middleware');

// üõ°Ô∏è CONFIGURAR LIMITADORES ESPEC√çFICOS PARA AUTENTICACI√ìN
const forgotPasswordLimiter = createSmartRateLimit({
    windowMs: 15 * 60 * 1000,        // 15 minutos
    maxByIP: 5,                      // 5 solicitudes por IP
    maxByUser: 3,                    // 3 solicitudes por usuario identificado por email/phone
    message: "Demasiadas solicitudes de recuperaci√≥n de contrase√±a",
    trustedIPs: []
});

const verifyCodeLimiter = createSmartRateLimit({
    windowMs: 15 * 60 * 1000,        // 15 minutos
    maxByIP: 10,                     // 10 intentos por IP
    maxByUser: 5,                    // 5 intentos por tel√©fono
    message: "Demasiados intentos de verificaci√≥n de c√≥digo",
    trustedIPs: []
});

const resetPasswordLimiter = createSmartRateLimit({
    windowMs: 15 * 60 * 1000,        // 15 minutos
    maxByIP: 5,                      // 5 cambios por IP
    maxByUser: 3,                    // 3 cambios por usuario
    message: "Demasiados intentos de cambio de contrase√±a",
    trustedIPs: []
});

// api/auth/

// üìå RUTAS DE RECUPERACI√ìN DE CONTRASE√ëA

// Solicitar recuperaci√≥n de contrase√±a (email o WhatsApp)
router.post('/forgot-password', forgotPasswordLimiter, authController.forgotPassword);

// Validar token de recuperaci√≥n (solo para email)
router.get('/validate-reset-token/:token', authController.validateResetToken);

// Verificar c√≥digo de recuperaci√≥n (solo para WhatsApp)
//router.post('/verify-reset-code', verifyCodeLimiter, authController.verifyResetCode);

// Restablecer contrase√±a
router.post('/reset-password', resetPasswordLimiter, authController.resetPassword);

module.exports = router;